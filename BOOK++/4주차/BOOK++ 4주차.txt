권예빈

<4주차(2020.10.17): p.71 ~ p.97
1. 모르는 단어가 있으면 간단한 예제와 함께 소개하기
· thin-tailed:
Probability distribution functions that decay faster than an exponential
It serves as a model for situations in which extreme events are unlikely to occur.

· distill:
To distill something said or written is to reduce it but keep the most important part
ex) She distilled the report into a paragraph.

· acquaint someone with someting:
to give someone information about something
ex) The museum offers workshops to acquaint children with the world of radio.

2. 인상 깊었던 1~2구절 적어오기
· First make it work, then make it beautiful.

3. 읽었던 내용에 대해서 간단한 자기 생각
· 한국에서는 무늬만 프로그래머인 단순 코딩 노동자를 '코딩노예'라고 낮추어 부른다.
이 책에서는 자기 주관 없이 주어진 업무만을 하는 사람에 대해 'Code monkey' 라는 표현을 사용했다.
어딜 가나 사람 사는 곳은 다 저런 문제로 골머리를 앓는다는 점을 다시한번 알게되었고, 그러한 사람이 되지 않도록 항상 경계해야한다는 생각을 했다.

· 이전에 '한 사이클은 6주이다' 라는 내용을 읽고 하나의 프로젝트를 마치는데에 6주가 걸린다는 내용인 줄 알았다. 
이번 챕터를 읽고보니 하나의 프로젝트는 여러개의 단계로 이루어져있고, 각각의 단계가 6주동안 이뤄짐을 알게되었다.
졸업 전까지 6주동안 프로젝트를 완성할 만큼 실력을 키워야하나 고민했는데, 조금 여유가 생긴 기분이다.

·  과제를 할 때 세부적인 내용을 먼저 구현한 뒤 큰 틀을 완성하는 식으로 했던적이 있었다.
그 때에도 맞게 하고있는건지 불안한 마음이 많이 들었었는데, 오늘 읽은 내용을 보니 작지만 눈으로 결과를 확인 가능한 부분을 먼저 완성하는 것이 나은 선택임을 다시한번 알게 되었다.



이주현
1. 모르는 단어
- execute
=> Together,?we?would?be?able?to?execute?the?joint?marketing?promotion?with?minimal?additional?cost?to?both?companies.
(처단하다라는 뜻으로만 쓰이는 줄 알았는데 실행하다라는 뜻도 있네요! 위 예시는 협력하면 프로모션을 실행할 수 있을 것이다 라는 뜻)

- deploy
(배치하다, 효율적으로 사용하다라는 뜻이 있는데 배치하다는 군대, 무기를 배치하다라는 뜻인데 본문 문단을 보면 At the end of the cycle, the team 
will deploy their work.이라고 써 있는데 둘 중에 무슨 뜻이려나요... 일을 효율적으로 사용하다는 좀 이상한 것 같기도하네요)

- legitimate
=> Politicians?are?legitimate?targets?for?satire.
(정치인들은 풍자를 위한 적당한 타겟이다...라는 뜻)

- hypothetical
=> This?is?merely?hypothetical.
(이것은 어디까지나 가설에 불과하다라는 뜻)

- patchy
=> His?knowledge?is?patchy.
(지식이 고르지 못하다는 뜻)

2. 인상 깊었던 구절

- We want the project to stay “whole” through the entire process so we never lose sight of the bigger picture.
(세부적인 것만 고민하다가 큰 그림을 놓치는 경우가 꽤 많아서 항상 기억해둬야 할 것 같은 문장으로 선택했습니다!) 

- The way to really figure out what needs to be done is to start doing real work.

3. 읽었던 내용에 대한 생각

- 굉장히 자유로운 분위기로 프로젝트를 진행하는 것 같아 저런 분위기에서 프로젝트를 하면 즐거울 것 같다는 생각이 많이 들었다. 각 사람의
 창의성을 존중하면서 팀으로 협력해서 일을 해나가는 것 같아 가장 효율적으로 일하는 방식이 아닐까하는 생각이 들었다. 나중에 회사에 가서 이 책에서
 말하는 방식으로 일을 할 수 있으면 가장 행운일 것 같다는 생각을 했다!



박장성
1. autonomy 자치 독립 자율
2. deploy - 배포하다 전개하다
3. distill 증류하다, 가장 중요한 부분만 뽑아내다.
4. tangible - real, not imaginary, able to be shown touched or experienced.
5. demoable - demo-able
6. chip away - 조금씩 깎아내리다, 야금야금 무너뜨리다.
 Such a concession would allow the North koreans to Chip Away at an agreement, especially if they managed to
hide programs not discovered during the berification process.
7. hypothetical - imagined or suggested but not necessarily real or true; 이론적인 
8. speculative - based on a guess and not on information - 추측된
9. functionality - 기능성, any or all of the operations performed by a piece of equipment or a software program
10. resolve - to solve or end a problem or difficulty , to make a decision formally or with determination
11. amenable - willing to accept or be influenced by a suggestion.
12. barely 간신히, 가까스로, 거의 하지 않다 VS hardly -거의 하지 않다
13. scaffolding 비계
14, patchy - 고르지 못한, 듬성듬성
15. authentication : 인증 진본확인
16. factor out - 제외시키다. 뽑아내다.
17. nag - 잔소리하다
18. glossary - 단어집, 용어사전.


10 Hand Over Responsibility - 팀을 믿고 일을 넘겨라
이제 bet이 끝났다! 또다른 싸이클을 시작할 차례이다. 즉. 어떤 방식으로 팀이 일을 하는 것일까?

누가 이 일을 하고 저 일을 하라는 등 지시하지 않는다. hand over responsibility, 즉 책임을 팀에 넘기는 것이다.
the team is going to define their own tasks and their
own approach to the work이고 full autonomy를 가진다.
팀을 믿고 팀에 맡기는 것이다.
what works on paper almost never works exactly as designed in practice.
미리 짜서 주면은, planning up front makes you blind to the reality along the way.

잊지 말아야 하는 것은, 팀에게 absolute freedome to invent a solution from scratch를 주는 게 아니다.
즉 우리는 아에서 이미 shaping도 했고 boundaries도 at the right level of abstraction으로 정해놨다.
이런 틀이 잡혀있기 때문에 나머지 공백은 팀이 채우는 것이다.

참고로 이 기간에, deploy 즉 배포? 배치?를 해야한다고 한다. 즉
테스팅과 QA(품질보증) 이런 것들이 within the cycle에 일어나야 한다.
그리고 자잘한 업데이트들은 cool-down 기간에 한다고 한다.

처음에 팀에게 주면 팀이 일을 안 하는 것처럼 보일 수도 있다.
why? because each person has their head down trying to figure out how the existing system works and
which starting point is best. 즉 getting oriented하고 있는 것이다.
그리고 절대 이 때 "현재 상황은 어때"라고 물어보지 않는다. it takes away time that the team needs to find
the best approach.

만약 3일이 지나도 그대로라면, 이때에는 스리슬쩍 물어본다.

막상 일을 시작하면 하면 할수록, as they get heir hands dirty, 처음에는 생각치도 못한 것들이 무수히 나온다고 한다.
그리고 이 unexpected details들이 make up the true bulk of the project, 대부분을 차지한단다.
이런식으로, tasks들은 doing real work를 하면서 발견하는 것이다.
the way to really figure out what needs to be done is to start doing real work
- 뭘 해야될까를 알고 싶으면, 일을 일단 시작해라-


11 Get One Piece Done - 일단 하나라도 해라
자 이제 팀이 방향을 잡아갈수록, tasks들을 발견할 것이다. 하지만 lots of things are done했지만 nothing is
REALLY done하지 않았기에 팀들이 insecure하게 느낄 수 있다.

따라서 그들은 뭔가 실체적이고 명백하고 데모를 할 수 있는(demoable)걸 첫 주에 만들어야 한다. 그것은
세로로 좁은 곳에 뭔가를 합치는 것이지 가로로 넓게 펼치는 것이 아니다. (한 곳에 집중을 하라는 뜻인 듯)

project는 2층으로 나뉜다고 한다. front-end, back-end. design and code. 
아하 front-end는 앞에다 내놓는 것이니까 디자인이고 back-end는 뒤에서 하는 일이니 코드같이 내부적인 것인가 보다.
물론 더 있지만 대부분의 프로젝트에서는 두개의 큰 축이라고 한다.
1 디자인을 짜봤자 코드로 안 옮겨지면 무용지물이다.
2 코드를 짤 떄에는 UI나 디자인을 고려해야한다.

Case study : clients in projects
목표기능 
1. 고객이 프로젝트에 접근 가능하다.
2. 고객을 관리할 수 있다
3. visibility toggle : ON OFF 스위치로 고객이 접근할 수 있는 정보를 고른다.

팀에게 일이 맡겨졌다는 것은, 팀이 got oriented 되었으며, 원래의 프로그램의 코드에도 익숙해져 있다는 뜻이다.

따라서 디자이너랑 프로그래머가 프로젝트에 착수한다.
디자이너들이 UI를 고민할 때 프로그래머들은 그냥 wating around 하지 않는다. 왜냐하면 pitch에서 충분한 정보를
얻었기 때문이다. 절대로 디자이너가 UI를 다 만들 때까지 기다리지 않는다.

프로그래머들이 일을 하기 위해서 완성된 디자인이 필요한 게 아니다. endpoints가 필요하다.

따라서 처음에 디자이너가 프로그래머에게 주는 인터페이스는 looks very basic. 

처음에는 아름다운 정렬, 색, 필체는 필요치 않다. 
First make it work, then make it beautiful. 프로그래머한테도 똑같은 원리가 적용된다.
중요한 것은 back-and-forth 왔다갔다 하는 것이다.

처음에 뭐부터 build할지 고를 때 3가지 기준이 있다.

1. core
사이클의 초반에 해야되는 것들, central한 것들 부터 시작한다.

2. small
작아야 한다. the point is to finish something meaningful in a few days and build momentum

3. novel
전에는 해보지 않았던 걸 한다. 예를 들어 고객 관리 기능을 추가하려 한다. 만약 고객의 이름을 바꾸는
기능은 고객이 아닌 일반 유저들 이름 바꾸는 거랑 원리가 비슷할 것이다. 따라서 이거를 먼저 해봤자
불확실성을 지우는 것도 아니고, 의미가 없다. new idea를 적용시킬 수 있는 것 부터 시작해라 

12 Map the scopes - 문제를 쪼개라

11챕터에서 일단 프로젝트에서 작은 부분부터 시작했다. 이것은 프로젝트 중에 쓸 수 있는 일반적인
테크닉이다.

프로젝트를 위한 tasks을 organize할 때 중요한 건 사람으로 일을 나누는 것이 아니라 구조로 나누는 것이다.
예를 들어 Food Menu/Venue Setup/Light/Sound. 그래야 어느 파트가 어떻게 하고 있는지 파악하기가 쉽다.

한 부분을 끝내고 다음 부분을 끝내는 방식이 많은 부분이 마지막에 가서야 come togethr되는 것보다 낫다.

이 챕터에서는 어떻게 하나의 프로젝트를 부분부분(scopes)들로 쪼개서 tackle them one by one할 수 있는지
알아본다.

일단 처음에는 start discovering tasks이다. 처음에는 그저 capture a variety of things that need to happen을
하는 것으로도 충분하다. 하지만 오래는 아니다. too low-level하기 때문이다.
그러면서 점점 scopes들을 만드는데, 각각 독립적으로, 짧은 시간안에 끝날수 있는 문제들로 구성되어야 한다.
scopes들은 bigger than tasks but much smaller than the overall project이다. 이 scope들은
to-do list로써 표현하고 tasks들로 채워진다.

case study : message drafts

discoverings scopes는 머릿속으로 계획을 하는 게 아니라 직접 해가면서 얻는 것이다. 상상하는 것과
실제로 하는 것은 다르기 때무이다. 

잘 만든 scopes는 프로젝트의 해부도와 같다. 잘 만든 scope에는 세가지 특징이 있다.
1. 프로젝트 전반을 잘 알 수 있고 중요한 문제들이 숨어있지 않다.
2. 스코프가 올바른 정보를 주기 때문에 프로젝트에 관한 대화에 막힘이 없다.
3. 새로운 tasks들이 나타나도 어디에 추가할지 금방 안다. 

반면에 이러한 특징이 나타나면 다시 그려야 한다.
1. 하나의 스코프의 진전도가 보이지 않는다면, tasks들이 unrelated일 가능성이 높다. 
2. 스코프 안에 tasks들이 너무 많아서 금방 끝내기에는 스코프가 너무 크다.

scope에는 2가지 모양이 있는데 1. layer cakes 2. icebergs.
layer cakes는 front end와 back end가 얼추 비슷하다면 icebergs는 한 쪽이 다른 쪽보다 역할이
크게 중요하다.

스코프에 맞지 않는 것들은 chowder리스트에 넣는다. 하지만 keep a skeptical eye on it한다.

일을 하다 보면 수많은 new tasks들이 나온다. 이런 것들은 record them as tasks on the scope.
그래서 must-haves와 nice-to-haves를 구분한다. 왜냐하면 시간은 한정되었기 때문이다.





예상대로 Build가 일단 팀들에게 project를 맡기는 게 맞았다.
그리고 designer - front-end, programmer - back-end로 취급해서 설명을 하는데 흥미로웠음.
마지막에 glossary라고 용어를 모아놓은 곳이 있는데 진작 읽어볼 걸 그랬다. 대부분 내가 생각한
의미와 맞아떨어지긴 한다.
