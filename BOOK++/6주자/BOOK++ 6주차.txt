권예빈

<4주차(2020.10.31): p.98 ~ p.133
1. 모르는 단어가 있으면 간단한 예제와 함께 소개하기
· spur:
원동력|||원동력이 되다, 자극하다

· knee-jerk:
(별 생각 없이) 자동적으로 나온
ex) It was a knee-jerk reaction on her part.

2. 인상 깊었던 1~2구절 적어오기
· A small minority of customers might overreact and say things like "You ruined it! Change it back!"

3. 읽었던 내용에 대해서 간단한 자기 생각
· 이번에 읽은 단원은 새로운 내용을 다루기보단 전반적인 흐름을 정리하는 느낌이었다.
긴 시간동안 책을 읽으며 조금 가물가물하던 부분도 있었는데, 요약된 내용들이 기억을 되짚어 보는데에 도움이 되었다.
· 이 책은 다른사람들과의 협업과정에서 적용 가능한 문제 처리방안 중 하나를 소개하였다.
저자가 소개한 방법은 분명 효과가 있겠지만, 모든 상황에 적용 가능한 것은 아닐것이라고 생각한다.
그렇기 때문에, 저자의 방법을 참고하되 더욱 효과적인 방법을 찾아 상황에 맞게 적절한 방식으로 효율적인 협업을 이끌어나가고 싶다.


이주현

1. 모르는 단어
-populate
=> 채우다
The file replication service cannot populate the system volume.
파일 복제 서비스에서 시스템 볼륨을 채울 수 없다는 뜻.
- interdependency
=> 상호 의존성
Love is the beginning of interdependence. 
사랑은 상호 의존성의 시작이다. (좀 더 자연스럽게는 사랑이란 서로 의지하기 시작하는 것이다.)
- vantage
=> 우세
attack a problem from a vantage point
유리한 입장에서 문제를 연구하다. 우세가 아니라 유리하다인게 살짝 아쉽지만 비슷하게 쓰일 것 
같네요.
- accumulate
=> 축적하다
Your way to accumulate a million dollars is very unique. 
당신이 백만 불을 모으는(축적하는) 방법은 매우 독특하군요.
- facilitate
=> 촉진하다
They observed how the paratope facilitate the act.
그들은 항체와 항원 결합 부위가 어떻게 작용을 촉진하는지 관찰했다.
- opaque
=> 불투명한
We changed our windows to opaque glass ones. 
우리는 창문을 불투명한 유리창으로 바꿨다.
- disproportion
=> 불균형
a profession with a high disproportion of male to female employees 
남녀 고용 인원 불균형이 심한 직종

2. 인상 깊었던 구절
- to-do lists actually grow as the team makes progress.
- Note how the hill shows how the work feels at different stages.

3. 읽었던 내용에 대한 생각 
- 프로젝트에 막상 뛰어들고 나서 생기는 문제들을 잘 고려하는 면에서 좋은 것 같다. 특히 일을 언덕에
비유해서 일을 해결해나가는 과정을 설명해주는 부분이 좋았다.
여러모로 개발자와 디자이너같은 팀원들에게 매니저로서 부담을 주지 않으려고 하는 것 같아 굉장히
섬세하다고 생각했고, 어떤 방식이 더 생산적인지를 잘 파악하고 있는 것 같다. 실제 일을 할 때도 이런
방식으로 일을 하면 정말 잘 될 것 같다고 느끼게 되었다. 



박장성

1. backsliding - 이전의 나쁜 행실로 돌아가기
2. outstanding - 뛰어난, 아직 지불되지 않은, 해결되지 않은
3. oversight - 실수,간과, 감독 관리
4. beget - (어떤 결과를) 부르다, 야기하다.


13. Show Progress - 과정이 드러나게끔.

매니저들이 진행상황을 직접 실무팀에게 물어보기보다는 팀이 작성한 to-dos 리스트를 통해 
스스로 확인하는 게 좋다. 하지만 to-dos은 부족하다.
왜냐하면 tasks들은 일을 하면서 discovered되기 때문이다.

또 tasks들에 estimates를 붙이는 것도 불확실하다. 4시간이 걸린다고 붙여도 tasks 안에 들어있는
unknowns 때문에 3일이 걸릴 수도 있는 것이다. 이 문제는 어떻게 해결할까?

work is like a hill 언덕 그래프 참조

현황을 한눈에 알 수 있다.
왼쪽에 있을수록 불확실성이, 오른쪽에 있을 수록 자신감,확실성이 높다고 보면 된다.

심지어 앞 챕터에서 했던 scopes과 hill을 합칠 수도 있다.
여러 scopes들을 hill에 표시함으로써 각 scope들의 진행상황을 알 수 있다.
진행상황 뿐만 아니라 어떤 문제를 어떤 순서대로 해결해야 될지도 파악 가능하다.
해결에 시간이 더 오래 걸릴 것 같은 것들, 두려운 것들을 먼저 오르막길 위로 올린다. 
most routine하고 least worrisome한 것들은 마지막에 다룬다.

14. Decide When to Stop - 멈춰라!
슬 개발단계의, build 단계의 end of the cycle이 다가온다. shape한 대로 열심히 만들었다.
hill 모형으로 중요한 것부터 처리도 했다. 그럼에도 불구하고 여전히 해야할 일이 남은 시간보다
훨씬 더 많다. shipping on time means shipping something imperfect. 시간 내에 개발한다는 것은
완벽하지 않는 무언가를 개발하는 것과 같다고 한다. 굉장히 현실적이고, 이 책을 읽는 내내 일
관성있게 저자가 강조해오기도 했다. 
처음에 계획한 대로 절대 못 만든다. 하지만 우리의 기준을 낮추고 싶지도 않다. 어떻게 할까?
비교를 하라. 처음에 만든, 완벽하고 이상적인 그것과? 아니다. baseline, 즉 기초, 핵심적인
그것과 비교를 하는 것이다. 그리고 customers들을 생각한다.
아! 완벽하지는 않아. 하지만 작동도 되고, customers들이 만족할 거야.

프로젝트를 연장할 때 (아마 cycle을 늘린다는 뜻)
1. 해결되지 않은 (outstanding) problems가 true must-haves일 때
2. 동일한 문제가 downhill에 있을 때 - uphill에 있는 것들은 다음 사이클로 넘긴다.
하지만 웬만해서는 기한은 지킨다.


hill을 이용한 건 , 머릿속에 기억해두면 유용하게 써먹을 수 있을 것 같다.

15. Move On - 계속 나아가라!

상품을 내놓았다. shipping을 했다는 뜻이다. feature releases가 feature request를 부른다.
잘 했네, 그래서 이거는?
버그는 튀어나오고 또다른 제안이 쏟아진다. 심지어 몇몇 고객들은 감정적이기까지 하다.
you ruined it! change it back!
차분히 기다리고 let the storm pass해라. 왜 shipping을 했는지 이유를 생각하고 흔들리지 않는다.
그런 피드백에 반응을 하고 싶을 것이다. 하지만 빚을 지지 않는 것이 중요하다.
no라고 말해도 나중에 천천히 그 피드백들을 검토할 수 있다. 하지만 yes라고 말하는 순간
피드백에 미래가 저당잡히는, debt이 생기는 것이다.
그 피드백이 정말 중요하다면 shaping 단계를 거친 다음 betting table에서 다른 제안들과 경쟁을 시키면 된다. 

Conclusion

Shaped versus unshaped work - 바로 시작하지 않고 shape단계를 거친다.
Setting appetites instead of estimates - 얼마 걸릴거야 막연한 기간이 아니라 6주에 맞춘다.
Designing at the right level of abstraction - 적당히 추상적인 shape 디자인으로 디자이너에 창의력의 여지를 남겨준다
Concepting with breadboards and fat marker sketches - breaboard와 fat marker sketches를 이용한다
Making bets with a capped downside and honoring them with uninterrupted time
Choosing the right cycle length(six weeks) - 프로젝트 내용에 따라 2주냐 6주냐 정한다.
A cool-down period between cycles - 6주 열심히 했으면 2주동안 cool-down 기간이 있어야 한다.
Breaking projects apart into scopes - 문제는 쪼갠다.
Downhill versus uphill work and communicating about unknowns - 과정이 드러나게 해라
Scope hammering to separate must-haves from nice-to-haves - 꼭 해야하는 것을 있으면 좋은 것들과 구분하라.
